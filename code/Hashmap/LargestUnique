'''
Given an array of integers, identify the highest value that appears only 
once in the array. If no such number exists, return -1.

Examples:

Example 1:

Input: [5, 7, 3, 7, 5, 8]
Expected Output: 8
Justification: The number 8 is the highest value that appears only once 
in the array.

Example 2:
Input: [1, 2, 3, 2, 1, 4, 4]
Expected Output: 3
Justification: The number 3 is the highest value that appears only once in the array.

Example 3:
Input: [9, 9, 8, 8, 7, 7]
Expected Output: -1
Justification: There is no number in the array that appears only once.
'''

'''
defaultdict is like a regular dict, but with a default value automatically
 assigned to keys that don't exist yet.

int is a function that returns 0. So defaultdict(int) creates a dictionary where:

Any new key that hasnâ€™t been added yet will automatically have the value 0.

With:
freq = defaultdict(int)
for char in s:
    freq[char] += 1  # If char not in freq, starts at 0

Without
freq = {}
for char in s:
    if char in freq:
        freq[char] += 1
    else:
        freq[char] = 1


'''

from collections import defaultdict
from typing import List

class Solution:
    def largestUniqueNumber(self, A: List[int]) -> int:
        freq = defaultdict(int)
        
        # Populate the dictionary with number frequencies
        for num in A:
            freq[num] += 1
        
        maxUnique = -1
        # Traverse the dictionary to find the largest unique number
        for key, value in freq.items():
            if value == 1:
                maxUnique = max(maxUnique, key)
        
        return maxUnique
    
    def largestUniqueNumberOwn(self, A: List[int]) -> int:
        maxUnique = -1
        # ToDo: Write Your Code Here.
        counter = {}
        for i in range(len(A)):
            counter[A[i]] = counter.get(A[i], 0) + 1
        
        for i,n in enumerate(A):
            if counter[n] == 1 and maxUnique < n:
                maxUnique = n
        return maxUnique

if __name__ == "__main__":
    sol = Solution()
    print(sol.largestUniqueNumber([5, 7, 3, 7, 5, 8]))  # Expected: 8
    print(sol.largestUniqueNumber([1, 2, 3, 2, 1, 4, 4]))  # Expected: 3
    print(sol.largestUniqueNumber([9, 9, 8, 8, 7, 7]))   # Expected: -1
